For header files :
#ifndef HEADERFILENAME_H
#define HEADERFILENAME_H
//your code
#endif

-Prevents recursive and double inclusion, are called include guards

command line:

gcc -std=c++11 -o filename main.cpp main2.cpp ....

-std= c++11 c++14 c++17

The following are deprecated 0x 1y 1z

-x specifies explicitly the language to be used //unnecessary

-o filename
filename is the name of the .out file . default is a.out

-O
-O1
-O2
-O3

optimizations. O < O1 < O2 < O3. Increase performance of out file. But also increases compile time.

main.cpp main2.cpp ...

list of files (cpp) to be compiled in the output file filename.out
There can only be one main function among all the files.

-c creates object file *.o


Execute with ./a.out unless -o compiler option is used in which case use ./newname
./ refers to current directory
This is used to by pass the restriction that we cannot execute from the commandline any program that is not directed to by the $PATH variable

Slicing is when a derived class object is assigned to a base class object. member variables unique to the derived class belonging to this derived class object lose their value because of the assignment to base class object.

To communicate with commandline
include cstdlib and use std::system("your command");
or include stdlib.h and use system();

Creating a static or shared library (Source : https://stackoverflow.com/questions/10358745/how-to-use-libraries )
Static
g++ -c unuseful.cpp #creates object file
ar rcs libunuseful.a unuseful.o #creates static library . Must prefix with lib and use .a extension

Shared
g++ -fPIC -c unuseful.cpp #fPIC and c create Position Independent Code
g++ -shared -o libunuseful.so unuseful.o # shared option creates shared library file . new name after -o must start with lib and end with .so

To use shared library:
The compilation commandline is
g++ main.cpp -L. -lunuseful

-L option followed by directory sets the directory to search for external libraries
-l option followed by name without the lib prefix selects the library to be used . Here the .so extension is also not used

Since shared libraries are loaded dynamically and are included at runtime, set the following environment variable
export LD_LIBRARY_PATH = $LD_LIBRARY_PATH:. #appends the pwd to the LD_LIBRARY_PATH env variable
If LD_LIBRARY_PATH is set then -L is not needed and vice versa

Virtual Destructors
When using a base class pointer to an inherited class object, 
